{
    "title": "AWS Secrets Manager",
    "description": "AWS Secrets Manager API Reference AWS Secrets Manager is a web service that\nenables you to store, manage, and retrieve, secrets.\n\nThis guide provides descriptions of the Secrets Manager API. For more\ninformation about using this service, see the AWS Secrets Manager User Guide\n[https://docs.aws.amazon.com/secretsmanager/latest/userguide/introduction.html].\n\n API Version \n\nThis version of the Secrets Manager API Reference documents the Secrets Manager\nAPI version 2017-10-17.\n\nAs an alternative to using the API directly, you can use one of the AWS SDKs,\nwhich consist of libraries and sample code for various programming languages and\nplatforms (such as Java, Ruby, .NET, iOS, and Android). The SDKs provide a\nconvenient way to create programmatic access to AWS Secrets Manager. For\nexample, the SDKs take care of cryptographically signing requests, managing\nerrors, and retrying requests automatically. For more information about the AWS\nSDKs, including how to download and install them, see Tools for Amazon Web\nServices [http://aws.amazon.com/tools/].\n\nWe recommend that you use the AWS SDKs to make programmatic API calls to Secrets\nManager. However, you also can use the Secrets Manager HTTP Query API to make\ndirect calls to the Secrets Manager web service. To learn more about the Secrets\nManager HTTP Query API, see Making Query Requests\n[https://docs.aws.amazon.com/secretsmanager/latest/userguide/query-requests.html] \nin the AWS Secrets Manager User Guide. \n\nSecrets Manager supports GET and POST requests for all actions. That is, the API\ndoesn't require you to use GET for some actions and POST for others. However,\nGET requests are subject to the limitation size of a URL. Therefore, for\noperations that require larger sizes, use a POST request.\n\n Support and Feedback for AWS Secrets Manager \n\nWe welcome your feedback. Send your comments to \nawssecretsmanager-feedback@amazon.com [awssecretsmanager-feedback@amazon.com],\nor post your feedback and questions in the AWS Secrets Manager Discussion Forum\n[http://forums.aws.amazon.com/forum.jspa?forumID=296]. For more information\nabout the AWS Discussion Forums, see Forums Help\n[http://forums.aws.amazon.com/help.jspa].\n\n How examples are presented \n\nThe JSON that AWS Secrets Manager expects as your request parameters and that\nthe service returns as a response to HTTP query requests are single, long\nstrings without line breaks or white space formatting. The JSON shown in the\nexamples is formatted with both line breaks and white space to improve\nreadability. When example input parameters would also result in long strings\nthat extend beyond the screen, we insert line breaks to enhance readability. You\nshould always submit the input as a single JSON text string.\n\n Logging API Requests \n\nAWS Secrets Manager supports AWS CloudTrail, a service that records AWS API\ncalls for your AWS account and delivers log files to an Amazon S3 bucket. By\nusing information that's collected by AWS CloudTrail, you can determine which\nrequests were successfully made to Secrets Manager, who made the request, when\nit was made, and so on. For more about AWS Secrets Manager and its support for\nAWS CloudTrail, see Logging AWS Secrets Manager Events with AWS CloudTrail\n[http://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring.html#monitoring_cloudtrail] \nin the AWS Secrets Manager User Guide. To learn more about CloudTrail, including\nhow to turn it on and find your log files, see the AWS CloudTrail User Guide\n[https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html]\n.",
    "docsUrl": "https://docs.aws.amazon.com/secretsmanager/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/secretsmanager/2017-10-17/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://secretsmanager.amazonaws.com/",
                    "http://secretsmanager.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CancelRotateSecret": {
            "main": "./lib/actions/CancelRotateSecret.js",
            "title": "CancelRotateSecret",
            "description": "Disables automatic scheduled rotation and cancels the rotation of a secret if\none is currently in progress.\n\nTo re-enable scheduled rotation, call RotateSecret with \nAutomaticallyRotateAfterDays set to a value greater than 0. This will\nimmediately rotate your secret and then enable the automatic schedule.\n\nIf you cancel a rotation that is in progress, it can leave the VersionStage \nlabels in an unexpected state. Depending on what step of the rotation was in\nprogress, you might need to remove the staging label AWSPENDING from the\npartially created version, specified by the VersionId response value. You should\nalso evaluate the partially rotated new version to see if it should be deleted,\nwhich you can do by removing all staging labels from the new version's \nVersionStage field.\n\nTo successfully start a rotation, the staging label AWSPENDING must be in one of\nthe following states:\n\n *  Not be attached to any version at all\n   \n   \n *  Attached to the same version as the staging label AWSCURRENT \n   \n   \n\nIf the staging label AWSPENDING is attached to a different version than the\nversion with AWSCURRENT then the attempt to rotate fails.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:CancelRotateSecret\n   \n   \n\n Related operations \n\n *  To configure rotation for a secret or to manually trigger a rotation, use \n   RotateSecret.\n   \n   \n *  To get the rotation configuration details for a secret, use DescribeSecret.\n   \n   \n *  To list all of the currently available secrets, use ListSecrets.\n   \n   \n *  To list all of the versions currently associated with a secret, use \n   ListSecretVersionIds.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CancelRotateSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateSecret": {
            "main": "./lib/actions/CreateSecret.js",
            "title": "CreateSecret",
            "description": "Creates a new secret. A secret in Secrets Manager consists of both the protected\nsecret data and the important information needed to manage the secret.\n\nSecrets Manager stores the encrypted secret data in one of a collection of\n\"versions\" associated with the secret. Each version contains a copy of the\nencrypted secret data. Each version is associated with one or more \"staging\nlabels\" that identify where the version is in the rotation cycle. The \nSecretVersionsToStages field of the secret contains the mapping of staging\nlabels to the active versions of the secret. Versions without a staging label\nare considered deprecated and are not included in the list.\n\nYou provide the secret data to be encrypted by putting text in either the \nSecretString parameter or binary data in the SecretBinary parameter, but not\nboth. If you include SecretString or SecretBinary then Secrets Manager also\ncreates an initial secret version and automatically attaches the staging label \nAWSCURRENT to the new version.\n\n *  If you call an operation that needs to encrypt or decrypt the SecretString or \n   SecretBinary for a secret in the same account as the calling user and that\n   secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the\n   account's default AWS managed customer master key (CMK) with the alias \n   aws/secretsmanager. If this key doesn't already exist in your account then\n   Secrets Manager creates it for you automatically. All users and roles in the\n   same AWS account automatically have access to use the default CMK. Note that\n   if an Secrets Manager API call results in AWS having to create the account's\n   AWS-managed CMK, it can result in a one-time significant delay in returning\n   the result.\n   \n   \n *  If the secret is in a different AWS account from the credentials calling an\n   API that requires encryption or decryption of the secret value then you must\n   create and use a custom AWS KMS CMK because you can't access the default CMK\n   for the account using credentials from a different AWS account. Store the ARN\n   of the CMK in the secret when you create the secret or when you update it by\n   including it in the KMSKeyId. If you call an API that must encrypt or decrypt \n   SecretString or SecretBinary using credentials from a different account then\n   the AWS KMS key policy must grant cross-account access to that other\n   account's user or role for both the kms:GenerateDataKey and kms:Decrypt\n   operations.\n   \n   \n\n \n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:CreateSecret\n   \n   \n *  kms:GenerateDataKey - needed only if you use a customer-managed AWS KMS key\n   to encrypt the secret. You do not need this permission to use the account's\n   default AWS managed CMK for Secrets Manager.\n   \n   \n *  kms:Decrypt - needed only if you use a customer-managed AWS KMS key to\n   encrypt the secret. You do not need this permission to use the account's\n   default AWS managed CMK for Secrets Manager.\n   \n   \n *  secretsmanager:TagResource - needed only if you include the Tags parameter. \n   \n   \n\n Related operations \n\n *  To delete a secret, use DeleteSecret.\n   \n   \n *  To modify an existing secret, use UpdateSecret.\n   \n   \n *  To create a new version of a secret, use PutSecretValue.\n   \n   \n *  To retrieve the encrypted secure string and secure binary values, use \n   GetSecretValue.\n   \n   \n *  To retrieve all other details for a secret, use DescribeSecret. This does not\n   include the encrypted secure string and secure binary values.\n   \n   \n *  To retrieve the list of secret versions associated with the current secret,\n   use DescribeSecret and examine the SecretVersionsToStages response value.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteResourcePolicy": {
            "main": "./lib/actions/DeleteResourcePolicy.js",
            "title": "DeleteResourcePolicy",
            "description": "Deletes the resource-based permission policy that's attached to the secret.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:DeleteResourcePolicy\n   \n   \n\n Related operations \n\n *  To attach a resource policy to a secret, use PutResourcePolicy.\n   \n   \n *  To retrieve the current resource-based policy that's attached to a secret,\n   use GetResourcePolicy.\n   \n   \n *  To list all of the currently available secrets, use ListSecrets.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteResourcePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteSecret": {
            "main": "./lib/actions/DeleteSecret.js",
            "title": "DeleteSecret",
            "description": "Deletes an entire secret and all of its versions. You can optionally include a\nrecovery window during which you can restore the secret. If you don't specify a\nrecovery window value, the operation defaults to 30 days. Secrets Manager\nattaches a DeletionDate stamp to the secret that specifies the end of the\nrecovery window. At the end of the recovery window, Secrets Manager deletes the\nsecret permanently.\n\nAt any time before recovery window ends, you can use RestoreSecret to remove the \nDeletionDate and cancel the deletion of the secret.\n\nYou cannot access the encrypted secret information in any secret that is\nscheduled for deletion. If you need to access that information, you must cancel\nthe deletion with RestoreSecret and then retrieve the information.\n\n *  There is no explicit operation to delete a version of a secret. Instead,\n   remove all staging labels from the VersionStage field of a version. That\n   marks the version as deprecated and allows Secrets Manager to delete it as\n   needed. Versions that do not have any staging labels do not show up in \n   ListSecretVersionIds unless you specify IncludeDeprecated.\n   \n   \n *  The permanent secret deletion at the end of the waiting period is performed\n   as a background task with low priority. There is no guarantee of a specific\n   time after the recovery window for the actual delete operation to occur.\n   \n   \n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:DeleteSecret\n   \n   \n\n Related operations \n\n *  To create a secret, use CreateSecret.\n   \n   \n *  To cancel deletion of a version of a secret before the recovery window has\n   expired, use RestoreSecret.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeSecret": {
            "main": "./lib/actions/DescribeSecret.js",
            "title": "DescribeSecret",
            "description": "Retrieves the details of a secret. It does not include the encrypted fields.\nOnly those fields that are populated with a value are returned in the response. \n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:DescribeSecret\n   \n   \n\n Related operations \n\n *  To create a secret, use CreateSecret.\n   \n   \n *  To modify a secret, use UpdateSecret.\n   \n   \n *  To retrieve the encrypted secret information in a version of the secret, use \n   GetSecretValue.\n   \n   \n *  To list all of the secrets in the AWS account, use ListSecrets.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetRandomPassword": {
            "main": "./lib/actions/GetRandomPassword.js",
            "title": "GetRandomPassword",
            "description": "Generates a random password of the specified complexity. This operation is\nintended for use in the Lambda rotation function. Per best practice, we\nrecommend that you specify the maximum length and include every character type\nthat the system you are generating a password for can support.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:GetRandomPassword",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetRandomPassword.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetResourcePolicy": {
            "main": "./lib/actions/GetResourcePolicy.js",
            "title": "GetResourcePolicy",
            "description": "Retrieves the JSON text of the resource-based policy document that's attached to\nthe specified secret. The JSON request string input and response output are\nshown formatted with white space and line breaks for better readability. Submit\nyour input as a single line JSON string.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:GetResourcePolicy\n   \n   \n\n Related operations \n\n *  To attach a resource policy to a secret, use PutResourcePolicy.\n   \n   \n *  To delete the resource-based policy that's attached to a secret, use \n   DeleteResourcePolicy.\n   \n   \n *  To list all of the currently available secrets, use ListSecrets.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetResourcePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetSecretValue": {
            "main": "./lib/actions/GetSecretValue.js",
            "title": "GetSecretValue",
            "description": "Retrieves the contents of the encrypted fields SecretString or SecretBinary from\nthe specified version of a secret, whichever contains content.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:GetSecretValue\n   \n   \n *  kms:Decrypt - required only if you use a customer-managed AWS KMS key to\n   encrypt the secret. You do not need this permission to use the account's\n   default AWS managed CMK for Secrets Manager.\n   \n   \n\n Related operations \n\n *  To create a new version of the secret with different encrypted information,\n   use PutSecretValue.\n   \n   \n *  To retrieve the non-encrypted details for the secret, use DescribeSecret.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetSecretValue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListSecretVersionIds": {
            "main": "./lib/actions/ListSecretVersionIds.js",
            "title": "ListSecretVersionIds",
            "description": "Lists all of the versions attached to the specified secret. The output does not\ninclude the SecretString or SecretBinary fields. By default, the list includes\nonly versions that have at least one staging label in VersionStage attached.\n\nAlways check the NextToken response parameter when calling any of the List* \noperations. These operations can occasionally return an empty or shorter than\nexpected list of results even when there are more results available. When this\nhappens, the NextToken response parameter contains a value to pass to the next\ncall to the same API to request the next part of the list.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:ListSecretVersionIds\n   \n   \n\n Related operations \n\n *  To list the secrets in an account, use ListSecrets.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListSecretVersionIds.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListSecrets": {
            "main": "./lib/actions/ListSecrets.js",
            "title": "ListSecrets",
            "description": "Lists all of the secrets that are stored by Secrets Manager in the AWS account.\nTo list the versions currently stored for a specific secret, use \nListSecretVersionIds. The encrypted fields SecretString and SecretBinary are not\nincluded in the output. To get that information, call the GetSecretValue \noperation.\n\nAlways check the NextToken response parameter when calling any of the List* \noperations. These operations can occasionally return an empty or shorter than\nexpected list of results even when there are more results available. When this\nhappens, the NextToken response parameter contains a value to pass to the next\ncall to the same API to request the next part of the list.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:ListSecrets\n   \n   \n\n Related operations \n\n *  To list the versions attached to a secret, use ListSecretVersionIds.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListSecrets.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutResourcePolicy": {
            "main": "./lib/actions/PutResourcePolicy.js",
            "title": "PutResourcePolicy",
            "description": "Attaches the contents of the specified resource-based permission policy to a\nsecret. A resource-based policy is optional. Alternatively, you can use IAM\nidentity-based policies that specify the secret's Amazon Resource Name (ARN) in\nthe policy statement's Resources element. You can also use a combination of both\nidentity-based and resource-based policies. The affected users and roles receive\nthe permissions that are permitted by all of the relevant policies. For more\ninformation, see Using Resource-Based Policies for AWS Secrets Manager\n[http://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html]\n. For the complete description of the AWS policy syntax and grammar, see IAM\nJSON Policy Reference\n[https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html] in\nthe IAM User Guide.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:PutResourcePolicy\n   \n   \n\n Related operations \n\n *  To retrieve the resource policy that's attached to a secret, use \n   GetResourcePolicy.\n   \n   \n *  To delete the resource-based policy that's attached to a secret, use \n   DeleteResourcePolicy.\n   \n   \n *  To list all of the currently available secrets, use ListSecrets.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutResourcePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutSecretValue": {
            "main": "./lib/actions/PutSecretValue.js",
            "title": "PutSecretValue",
            "description": "Stores a new encrypted secret value in the specified secret. To do this, the\noperation creates a new version and attaches it to the secret. The version can\ncontain a new SecretString value or a new SecretBinary value. You can also\nspecify the staging labels that are initially attached to the new version.\n\nThe Secrets Manager console uses only the SecretString field. To add binary data\nto a secret with the SecretBinary field you must use the AWS CLI or one of the\nAWS SDKs.\n\n *  If this operation creates the first version for the secret then Secrets\n   Manager automatically attaches the staging label AWSCURRENT to the new\n   version.\n   \n   \n *  If another version of this secret already exists, then this operation does\n   not automatically move any staging labels other than those that you\n   explicitly specify in the VersionStages parameter.\n   \n   \n *  If this operation moves the staging label AWSCURRENT from another version to\n   this version (because you included it in the StagingLabels parameter) then\n   Secrets Manager also automatically moves the staging label AWSPREVIOUS to the\n   version that AWSCURRENT was removed from.\n   \n   \n *  This operation is idempotent. If a version with a VersionId with the same\n   value as the ClientRequestToken parameter already exists and you specify the\n   same secret data, the operation succeeds but does nothing. However, if the\n   secret data is different, then the operation fails because you cannot modify\n   an existing version; you can only create new ones.\n   \n   \n\n *  If you call an operation that needs to encrypt or decrypt the SecretString or \n   SecretBinary for a secret in the same account as the calling user and that\n   secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the\n   account's default AWS managed customer master key (CMK) with the alias \n   aws/secretsmanager. If this key doesn't already exist in your account then\n   Secrets Manager creates it for you automatically. All users and roles in the\n   same AWS account automatically have access to use the default CMK. Note that\n   if an Secrets Manager API call results in AWS having to create the account's\n   AWS-managed CMK, it can result in a one-time significant delay in returning\n   the result.\n   \n   \n *  If the secret is in a different AWS account from the credentials calling an\n   API that requires encryption or decryption of the secret value then you must\n   create and use a custom AWS KMS CMK because you can't access the default CMK\n   for the account using credentials from a different AWS account. Store the ARN\n   of the CMK in the secret when you create the secret or when you update it by\n   including it in the KMSKeyId. If you call an API that must encrypt or decrypt \n   SecretString or SecretBinary using credentials from a different account then\n   the AWS KMS key policy must grant cross-account access to that other\n   account's user or role for both the kms:GenerateDataKey and kms:Decrypt\n   operations.\n   \n   \n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:PutSecretValue\n   \n   \n *  kms:GenerateDataKey - needed only if you use a customer-managed AWS KMS key\n   to encrypt the secret. You do not need this permission to use the account's\n   default AWS managed CMK for Secrets Manager.\n   \n   \n\n Related operations \n\n *  To retrieve the encrypted value you store in the version of a secret, use \n   GetSecretValue.\n   \n   \n *  To create a secret, use CreateSecret.\n   \n   \n *  To get the details for a secret, use DescribeSecret.\n   \n   \n *  To list the versions attached to a secret, use ListSecretVersionIds.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutSecretValue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RestoreSecret": {
            "main": "./lib/actions/RestoreSecret.js",
            "title": "RestoreSecret",
            "description": "Cancels the scheduled deletion of a secret by removing the DeletedDate time\nstamp. This makes the secret accessible to query once again.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:RestoreSecret\n   \n   \n\n Related operations \n\n *  To delete a secret, use DeleteSecret.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RestoreSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RotateSecret": {
            "main": "./lib/actions/RotateSecret.js",
            "title": "RotateSecret",
            "description": "Configures and starts the asynchronous process of rotating this secret. If you\ninclude the configuration parameters, the operation sets those values for the\nsecret and then immediately starts a rotation. If you do not include the\nconfiguration parameters, the operation starts a rotation with the values\nalready stored in the secret. After the rotation completes, the protected\nservice and its clients all use the new version of the secret. \n\nThis required configuration information includes the ARN of an AWS Lambda\nfunction and the time between scheduled rotations. The Lambda rotation function\ncreates a new version of the secret and creates or updates the credentials on\nthe protected service to match. After testing the new credentials, the function\nmarks the new secret with the staging label AWSCURRENT so that your clients all\nimmediately begin to use the new version. For more information about rotating\nsecrets and how to configure a Lambda function to rotate the secrets for your\nprotected service, see Rotating Secrets in AWS Secrets Manager\n[https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html] \nin the AWS Secrets Manager User Guide.\n\nSecrets Manager schedules the next rotation when the previous one is complete.\nSecrets Manager schedules the date by adding the rotation interval (number of\ndays) to the actual date of the last rotation. The service chooses the hour\nwithin that 24-hour date window randomly. The minute is also chosen somewhat\nrandomly, but weighted towards the top of the hour and influenced by a variety\nof factors that help distribute load.\n\nThe rotation function must end with the versions of the secret in one of two\nstates:\n\n *  The AWSPENDING and AWSCURRENT staging labels are attached to the same version\n   of the secret, or\n   \n   \n *  The AWSPENDING staging label is not attached to any version of the secret.\n   \n   \n\nIf instead the AWSPENDING staging label is present but is not attached to the\nsame version as AWSCURRENT then any later invocation of RotateSecret assumes\nthat a previous rotation request is still in progress and returns an error.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:RotateSecret\n   \n   \n *  lambda:InvokeFunction (on the function specified in the secret's metadata)\n   \n   \n\n Related operations \n\n *  To list the secrets in your account, use ListSecrets.\n   \n   \n *  To get the details for a version of a secret, use DescribeSecret.\n   \n   \n *  To create a new version of a secret, use CreateSecret.\n   \n   \n *  To attach staging labels to or remove staging labels from a version of a\n   secret, use UpdateSecretVersionStage.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RotateSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagResource": {
            "main": "./lib/actions/TagResource.js",
            "title": "TagResource",
            "description": "Attaches one or more tags, each consisting of a key name and a value, to the\nspecified secret. Tags are part of the secret's overall metadata, and are not\nassociated with any specific version of the secret. This operation only appends\ntags to the existing list of tags. To remove tags, you must use UntagResource.\n\nThe following basic restrictions apply to tags:\n\n *  Maximum number of tags per secret--50\n   \n   \n *  Maximum key length--127 Unicode characters in UTF-8\n   \n   \n *  Maximum value length--255 Unicode characters in UTF-8\n   \n   \n *  Tag keys and values are case sensitive.\n   \n   \n *  Do not use the aws: prefix in your tag names or values because it is reserved\n   for AWS use. You can't edit or delete tag names or values with this prefix.\n   Tags with this prefix do not count against your tags per secret limit.\n   \n   \n *  If your tagging schema will be used across multiple services and resources,\n   remember that other services might have restrictions on allowed characters.\n   Generally allowed characters are: letters, spaces, and numbers representable\n   in UTF-8, plus the following special characters: + - = . _ : / @.\n   \n   \n\nIf you use tags as part of your security strategy, then adding or removing a tag\ncan change permissions. If successfully completing this operation would result\nin you losing your permissions for this secret, then the operation is blocked\nand returns an Access Denied error.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:TagResource\n   \n   \n\n Related operations \n\n *  To remove one or more tags from the collection attached to a secret, use \n   UntagResource.\n   \n   \n *  To view the list of tags attached to a secret, use DescribeSecret.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagResource": {
            "main": "./lib/actions/UntagResource.js",
            "title": "UntagResource",
            "description": "Removes one or more tags from the specified secret.\n\nThis operation is idempotent. If a requested tag is not attached to the secret,\nno error is returned and the secret metadata is unchanged.\n\nIf you use tags as part of your security strategy, then removing a tag can\nchange permissions. If successfully completing this operation would result in\nyou losing your permissions for this secret, then the operation is blocked and\nreturns an Access Denied error.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:UntagResource\n   \n   \n\n Related operations \n\n *  To add one or more tags to the collection attached to a secret, use \n   TagResource.\n   \n   \n *  To view the list of tags attached to a secret, use DescribeSecret.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateSecret": {
            "main": "./lib/actions/UpdateSecret.js",
            "title": "UpdateSecret",
            "description": "Modifies many of the details of the specified secret. If you include a \nClientRequestToken and either SecretString or SecretBinary then it also creates\na new version attached to the secret.\n\nTo modify the rotation configuration of a secret, use RotateSecret instead.\n\nThe Secrets Manager console uses only the SecretString parameter and therefore\nlimits you to encrypting and storing only a text string. To encrypt and store\nbinary data as part of the version of a secret, you must use either the AWS CLI\nor one of the AWS SDKs.\n\n *  If a version with a VersionId with the same value as the ClientRequestToken \n   parameter already exists, the operation results in an error. You cannot\n   modify an existing version, you can only create a new version.\n   \n   \n *  If you include SecretString or SecretBinary to create a new secret version,\n   Secrets Manager automatically attaches the staging label AWSCURRENT to the\n   new version. \n   \n   \n\n *  If you call an operation that needs to encrypt or decrypt the SecretString or \n   SecretBinary for a secret in the same account as the calling user and that\n   secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the\n   account's default AWS managed customer master key (CMK) with the alias \n   aws/secretsmanager. If this key doesn't already exist in your account then\n   Secrets Manager creates it for you automatically. All users and roles in the\n   same AWS account automatically have access to use the default CMK. Note that\n   if an Secrets Manager API call results in AWS having to create the account's\n   AWS-managed CMK, it can result in a one-time significant delay in returning\n   the result.\n   \n   \n *  If the secret is in a different AWS account from the credentials calling an\n   API that requires encryption or decryption of the secret value then you must\n   create and use a custom AWS KMS CMK because you can't access the default CMK\n   for the account using credentials from a different AWS account. Store the ARN\n   of the CMK in the secret when you create the secret or when you update it by\n   including it in the KMSKeyId. If you call an API that must encrypt or decrypt \n   SecretString or SecretBinary using credentials from a different account then\n   the AWS KMS key policy must grant cross-account access to that other\n   account's user or role for both the kms:GenerateDataKey and kms:Decrypt\n   operations.\n   \n   \n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:UpdateSecret\n   \n   \n *  kms:GenerateDataKey - needed only if you use a custom AWS KMS key to encrypt\n   the secret. You do not need this permission to use the account's AWS managed\n   CMK for Secrets Manager.\n   \n   \n *  kms:Decrypt - needed only if you use a custom AWS KMS key to encrypt the\n   secret. You do not need this permission to use the account's AWS managed CMK\n   for Secrets Manager.\n   \n   \n\n Related operations \n\n *  To create a new secret, use CreateSecret.\n   \n   \n *  To add only a new version to an existing secret, use PutSecretValue.\n   \n   \n *  To get the details for a secret, use DescribeSecret.\n   \n   \n *  To list the versions contained in a secret, use ListSecretVersionIds.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateSecret.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateSecretVersionStage": {
            "main": "./lib/actions/UpdateSecretVersionStage.js",
            "title": "UpdateSecretVersionStage",
            "description": "Modifies the staging labels attached to a version of a secret. Staging labels\nare used to track a version as it progresses through the secret rotation\nprocess. You can attach a staging label to only one version of a secret at a\ntime. If a staging label to be added is already attached to another version,\nthen it is moved--removed from the other version first and then attached to this\none. For more information about staging labels, see Staging Labels\n[https://docs.aws.amazon.com/secretsmanager/latest/userguide/terms-concepts.html#term_staging-label] \nin the AWS Secrets Manager User Guide. \n\nThe staging labels that you specify in the VersionStage parameter are added to\nthe existing list of staging labels--they don't replace it.\n\nYou can move the AWSCURRENT staging label to this version by including it in\nthis call.\n\nWhenever you move AWSCURRENT, Secrets Manager automatically moves the label \nAWSPREVIOUS to the version that AWSCURRENT was removed from.\n\nIf this action results in the last label being removed from a version, then the\nversion is considered to be 'deprecated' and can be deleted by Secrets Manager.\n\n Minimum permissions \n\nTo run this command, you must have the following permissions:\n\n *  secretsmanager:UpdateSecretVersionStage\n   \n   \n\n Related operations \n\n *  To get the list of staging labels that are currently associated with a\n   version of a secret, use DescribeSecret and examine the \n   SecretVersionsToStages response value.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateSecretVersionStage.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}